# -*- coding: utf-8 -*-
"""Evaluator

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11IDrHCYnhRPvqrMdVhqu1IO8NT77JmH7
"""

from google.colab import drive
drive.mount('/content/drive')#,force_remount=True)
import pandas as pd
import numpy as np
#import tensorflow as tf
#%tensorflow_version 1.x
#%load_ext tensorboard

data_cifar10_new_history = pd.read_excel('/content/drive/My Drive/Colab Notebooks/SurveyPaper/cifar_10_history.xlsx')
data_cifar10_new_history.drop('Unnamed: 0',axis=1,inplace=True)
data_cifar10_new_history['Epochs'] = list(range(0,40))*115
data_cifar10_new_history = data_cifar10_new_history.rename(columns={'Function':'Activation Function'})
data_cifar10_new_history

data_cifar100_new_history = pd.read_excel('/content/drive/My Drive/Colab Notebooks/SurveyPaper/cifar_100_history.xlsx')
data_cifar100_new_history.drop('Unnamed: 0',axis=1,inplace=True)
data_cifar100_new_history['Epochs'] = list(range(0,40))*115
data_cifar100_new_history = data_cifar100_new_history.rename(columns={'Function':'Activation Function'})
data_cifar100_new_history

vgg1 = pd.read_excel('/content/drive/My Drive/Colab Notebooks/SurveyPaper/vgg_history.xlsx')
vgg2 = pd.read_excel('/content/drive/My Drive/Colab Notebooks/SurveyPaper/vgg_history (1).xlsx')
data_vgg_history = pd.concat([vgg1,vgg2]).reset_index(drop=True)
data_vgg_history.drop('Unnamed: 0',axis=1,inplace=True)
data_vgg_history['Epochs'] = list(range(0,25))*115
data_vgg_history = data_vgg_history.rename(columns={'Function':'Activation Function'})
data_vgg_history

pivot_ = pd.pivot_table(data=data_vgg_history,index=['Activation Function','Epochs'],columns=['Trial'],values=['loss','accuracy','val_loss','val_accuracy'])
pivot_

pivot_ = pivot_.reset_index()
pivot_.columns = [str(x[0])+''+str(x[1]) for x in pivot_.columns]
pivot_['Training Accuracy'] = pivot_[['accuracy1','accuracy2','accuracy3','accuracy4','accuracy5']].mean(axis=1)
pivot_['Testing Accuracy'] = pivot_[['val_accuracy1','val_accuracy2','val_accuracy3','val_accuracy4','val_accuracy5']].mean(axis=1)
pivot_['Training Loss'] = pivot_[['loss1','loss2','loss3','loss4','loss5']].mean(axis=1)
pivot_['Testing Loss'] = pivot_[['val_loss1','val_loss2','val_loss3','val_loss4','val_loss5']].mean(axis=1)

pivot_['Train Accuracy'] = pivot_[['accuracy1','accuracy2','accuracy3','accuracy4','accuracy5']].quantile(0.50,axis=1)
pivot_['Test Accuracy'] = pivot_[['val_accuracy1','val_accuracy2','val_accuracy3','val_accuracy4','val_accuracy5']].quantile(0.50,axis=1)
pivot_['Train Loss'] = pivot_[['loss1','loss2','loss3','loss4','loss5']].quantile(0.50,axis=1)
pivot_['Test Loss'] = pivot_[['val_loss1','val_loss2','val_loss3','val_loss4','val_loss5']].quantile(0.50,axis=1)
pivot_

pivot_.to_excel('/content/drive/My Drive/Colab Notebooks/SurveyPaper/imagenette_vgg_base_table.xlsx')

pivot_['Standard Deviation Training Accuracy'] = pivot_[['accuracy1','accuracy2','accuracy3','accuracy4','accuracy5']].std(axis=1)
pivot_['Standard Deviation Testing Accuracy'] = pivot_[['val_accuracy1','val_accuracy2','val_accuracy3','val_accuracy4','val_accuracy5']].std(axis=1)
pivot_['Standard Deviation Training Loss'] = pivot_[['loss1','loss2','loss3','loss4','loss5']].std(axis=1)
pivot_['Standard Deviation Testing Loss'] = pivot_[['val_loss1','val_loss2','val_loss3','val_loss4','val_loss5']].std(axis=1)

pivot_.groupby('Activation Function',as_index=False)[['Training Accuracy','Testing Accuracy','Training Loss',
                                       'Testing Loss','Train Accuracy','Test Accuracy','Train Loss',
                                       'Test Loss','Standard Deviation Training Accuracy',
                                       'Standard Deviation Testing Accuracy','Standard Deviation Training Loss','Standard Deviation Testing Loss']].agg({'mean',np.median}).to_excel('/content/drive/My Drive/Colab Notebooks/SurveyPaper/imagenette_vgg_table.xlsx')

import seaborn as sns
import matplotlib.pyplot as plt
# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="Epochs", y='Training Accuracy',
             hue="Activation Function",#, style="sex",
             data=pivot_,ci=None,style="Activation Function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,3))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
#plt.legend(, )
plt.show(g)

import seaborn as sns
import matplotlib.pyplot as plt
# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="Epochs", y='Train Accuracy',
             hue="Activation Function",#, style="sex",
             data=pivot_,ci=None,style="Activation Function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,3))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
#plt.legend(, )
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="Epochs", y='Training Loss',
             hue="Activation Function",#, style="sex",
             data=pivot_,ci=None,style="Activation Function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,25,3))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
#plt.legend(, )
plt.show(g)

sns.set_style("white")
g = sns.lineplot(x="Epochs", y='Train Loss',
             hue="Activation Function",#, style="sex",
             data=pivot_,ci=None,style="Activation Function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,25,3))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
#plt.legend(, )
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="Epochs", y='Testing Accuracy',
             hue="Activation Function",#, style="sex",
             data=pivot_,ci=None,style="Activation Function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,25,3))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
#plt.legend(, )
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="Epochs", y='Test Accuracy',
             hue="Activation Function",#, style="sex",
             data=pivot_,ci=None,style="Activation Function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,25,3))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
#plt.legend(, )
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="Epochs", y='Testing Loss',
             hue="Activation Function",#, style="sex",
             data=pivot_,ci=None,style="Activation Function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,25,3))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
#plt.legend(, )
plt.show(g)

sns.set_style("white")
g = sns.lineplot(x="Epochs", y='Test Loss',
             hue="Activation Function",#, style="sex",
             data=pivot_,ci=None,style="Activation Function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,25,3))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
#plt.legend(, )
plt.show(g)

data = pd.read_csv('/content/drive/My Drive/Colab Notebooks/SurveyPaper/Time.xlsx - Sheet1.csv')
data

data2 = data.melt()[10:].reset_index()
for x in data.columns[1:]:
    data2.loc[data2['variable'] == x,'index'] = range(1,11)

data2.columns = ['Epochs','Activation Function','Time Taken Per Epoch (In Seconds)']

import seaborn as sns
import matplotlib.pyplot as plt
# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="Epochs", y="Time Taken Per Epoch (In Seconds)",
             hue="Activation Function",#, style="sex",
             data=data2,ci=None,style="Activation Function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,11,3))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
#plt.legend(, )
plt.show(g)

map_func = {'Signum':'NR',
            'Identity':'f1',
            'Bipolar':'f2',
            'sigmoid':'f3',
            'tanh':'f4',
            'Absolute':'f5',
            'softsign':'f6',
            'LiSHT':'f7',
            'softplus':'f8',
            'relu':'f9',
            'LeakyReLU':'f10',
            'SiLU':'f11',
            'gelu':'f12',
            'selu':'f13',
            'elu':'f14',
            'PReLU':'f15',
            'Swish':'f16',
            'Mish':'f17',
            'Sine':'f18',
            'Quadratic':'f19',
            'Monotonic Cubic':'f20',
            'Non Monotonic Cubic':'f21',
            'Cos_2':'f22',
            'Shifted Sinc':'f23',
            'Growing Cosine Unit':'f24',
            'Decaying Sine Unit':'f25',
            'Act_Sign_Sin':'NR'
            }

map_func_2 = {'f1':0,
            'f2':1,
            'f3':2,
            'f4':3,
            'f5':4,
            'f6':5,
            'f7':6,
            'f8':7,
            'f9':8,
            'f10':9,
            'f11':10,
            'f12':11,
            'f13':12,
            'f14':13,
            'f15':14,
            'f16':15,
            'f17':16,
            'f18':17,
            'f19':18,
            'f20':19,
            'f21':20,
            'f22':21,
            'f23':22,
            'f24':23,
            'f25':24,
            #'f26':25,
            #'f27':26
            }

train_cifar10 = pd.read_csv('/content/drive/My Drive/Colab Notebooks/SurveyPaper/cifar_10_results_1.csv')
train_cifar100 = pd.read_csv('/content/drive/My Drive/Colab Notebooks/SurveyPaper/cifar_100_results_1.csv')
train_vgg = pd.read_csv('/content/drive/My Drive/Colab Notebooks/SurveyPaper/vgg_results_1.csv')

test_cifar10 = pd.read_pickle('/content/drive/My Drive/Colab Notebooks/SurveyPaper/cifar_10_results_cm_1.pkl')
test_cifar100 = pd.read_pickle('/content/drive/My Drive/Colab Notebooks/SurveyPaper/cifar_100_results_cm_1.pkl')
test_vgg = pd.read_pickle('/content/drive/My Drive/Colab Notebooks/SurveyPaper/vgg_results_cm_1.pkl')


train_cifar10['activation_function'] = train_cifar10['activation_function'].map(map_func)
train_cifar10 = train_cifar10[~train_cifar10['activation_function'].isin(['NR'])]
train_cifar10['sort'] = train_cifar10['activation_function'].map(map_func_2)
train_cifar10 = train_cifar10.sort_values(by=['sort','epochs'],ascending=(True,True))
train_cifar10.drop('sort',axis=1,inplace=True)

train_cifar100['activation_function'] = train_cifar100['activation_function'].map(map_func)
train_cifar100 = train_cifar100[~train_cifar100['activation_function'].isin(['NR'])]
train_cifar100['sort'] = train_cifar100['activation_function'].map(map_func_2)
train_cifar100 = train_cifar100.sort_values(by=['sort','epochs'],ascending=(True,True))
train_cifar100.drop('sort',axis=1,inplace=True)

train_vgg['activation_function'] = train_vgg['activation_function'].map(map_func)
train_vgg = train_vgg[~train_vgg['activation_function'].isin(['NR'])]
train_vgg['sort'] = train_vgg['activation_function'].map(map_func_2)
train_vgg = train_vgg.sort_values(by=['sort','epochs'],ascending=(True,True))
train_vgg.drop('sort',axis=1,inplace=True)

test_cifar10['activation_function'] = test_cifar10['activation_function'].map(map_func)
test_cifar10 = test_cifar10[~test_cifar10['activation_function'].isin(['NR'])]
test_cifar10['sort'] = test_cifar10['activation_function'].map(map_func_2)
test_cifar10 = test_cifar10.sort_values(by='sort',ascending=True)
test_cifar10.drop('sort',axis=1,inplace=True)

test_cifar100['activation_function'] = test_cifar100['activation_function'].map(map_func)
test_cifar100 = test_cifar100[~test_cifar100['activation_function'].isin(['NR'])]
test_cifar100['sort'] = test_cifar100['activation_function'].map(map_func_2)
test_cifar100 = test_cifar100.sort_values(by='sort',ascending=True)
test_cifar100.drop('sort',axis=1,inplace=True)

test_vgg['activation_function'] = test_vgg['activation_function'].map(map_func)
test_vgg = test_vgg[~test_vgg['activation_function'].isin(['NR'])]
test_vgg['sort'] = test_vgg['activation_function'].map(map_func_2)
test_vgg = test_vgg.sort_values(by='sort',ascending=True)
test_vgg.drop('sort',axis=1,inplace=True)

train_cifar10 = train_cifar10.reset_index(drop=True)
train_cifar100 = train_cifar100.reset_index(drop=True)
train_vgg = train_vgg.reset_index(drop=True)
test_cifar10 = test_cifar10.reset_index(drop=True)
test_cifar100 = test_cifar100.reset_index(drop=True)
test_vgg = test_vgg.reset_index(drop=True)

#def f1_metrics_test(df):
#    list_ = []
#    for i in df.index:
#        #Recall#
#        recall = df['TPR'][i]
#        #Precision#
#        precision = df['PPV'][i]
#        f1_score = 2 * precision * recall / (precision + recall)
#
#        recall = np.average(recall,weights=[0.01]*len(recall))
#        precision = np.average(precision,weights=[0.01]*len(precision))
#        f1_score = np.average(f1_score,weights=[0.01]*len(f1_score))
#        list_.append([recall,precision,f1_score])
#    return pd.DataFrame(list_)
#    list_ = pd.DataFrame(list_)
#    #list_ = list_.rename(columns={0:'recall',1:'precision',2:'f1_score'}) #0:'index',0:'activation_function',df['activation_function'][i],
#    list_ = pd.concat([df[['activation_function','test_loss','test_accuracy']],list_],axis=1)
#    #list_.dropna(inplace=True)
#    return list_
#
#f1_metrics_test(test_cifar10)

def f1_metrics(df):
    list_ = []
    for i in df.index:
        #Recall#
        recall = df['TPR'][i]
        #Precision#
        precision = df['PPV'][i]
        f1_score = 2 * precision * recall / (precision + recall)
        #if i == 8:
        #    print(f1_score)
        recall = np.average(recall,weights=[0.01]*len(recall))
        precision = np.average(precision,weights=[0.01]*len(precision))
        f1_score = np.average(f1_score[~np.isnan(f1_score)],weights=[0.01]*len(f1_score[~np.isnan(f1_score)]))
        #if i == 8:
        #    print(f1_score)
        list_.append(f1_score) #[recall,precision,f1_score]
    list_ = pd.DataFrame(list_)
    #list_ = list_.rename(columns={0:'recall',1:'precision',2:'f1_score'}) #0:'index',0:'activation_function',df['activation_function'][i],
    list_ = pd.concat([df[['activation_function','test_loss','test_accuracy']],list_],axis=1)
    #list_.dropna(inplace=True)
    return list_

f1_1=f1_metrics(test_cifar10)
f1_1 = f1_1.rename(columns={'activation_function':'activation_function',
                            'test_loss':'test_loss_cifar10',
                            'test_accuracy':'test_accuracy_cifar10',
                            #0:'recall_cifar10',
                            #1:'precision_cifar10',
                            0:'f1_score_cifar10'})
f1_2=f1_metrics(test_cifar100)
f1_2 = f1_2.rename(columns={'activation_function':'activation_function',
                            'test_loss':'test_loss_cifar100',
                            'test_accuracy':'test_accuracy_cifar100',
                            #0:'recall_cifar100',
                            #1:'precision_cifar100',
                            0:'f1_score_cifar100'})
f1_3=f1_metrics(test_vgg)
f1_3 = f1_3.rename(columns={'activation_function':'activation_function',
                            'test_loss':'test_loss_imagenette',
                            'test_accuracy':'test_accuracy_imagenette',
                            #0:'recall_imagenette',
                            #1:'precision_imagenette',
                            0:'f1_score_imagenette'})
test_data = pd.merge(pd.merge(f1_1,f1_2,on='activation_function',how='inner'),f1_3,on='activation_function',how='inner')
test_data.to_csv('/content/drive/My Drive/Colab Notebooks/SurveyPaper/pure_test_data.csv')
test_data

train_cifar10 = train_cifar10.rename(columns={'accuracy':'train_accuracy','loss':'train_loss'})
train_cifar100 = train_cifar100.rename(columns={'accuracy':'train_accuracy','loss':'train_loss'})
train_vgg = train_vgg.rename(columns={'accuracy':'train_accuracy','loss':'train_loss'})

train_cifar10

import seaborn as sns
import matplotlib.pyplot as plt
# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="epochs", y="train_loss",
             hue="activation_function",#, style="sex",
             data=train_cifar10[~train_cifar10['activation_function'].isin(['f20'])],ci=None,style="activation_function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,5))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
#plt.legend(, )
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="epochs", y="train_accuracy",
             hue="activation_function",#, style="sex",
             data=train_cifar10,ci=None,style="activation_function", #[~train_cifar10['activation_function'].isin(['f4','f21'])]
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,5))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="epochs", y="val_accuracy",
             hue="activation_function",#, style="sex",
             data=train_cifar10,ci=None,style="activation_function", #[~train_cifar10['activation_function'].isin(['f4','f21'])]
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,5))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="epochs", y="val_loss",
             hue="activation_function",#, style="sex",
             data=train_cifar10,ci=None,style="activation_function", #[~train_cifar10['activation_function'].isin(['f4','f21'])]
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,5))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="epochs", y="test_gradient",
             hue="activation_function",#, style="sex",
             data=train_cifar10,ci=None,style="activation_function", #[~train_cifar10['activation_function'].isin(['f4','f21'])]
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,5))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="epochs", y="time_taken_on_epoch",
             hue="activation_function",#, style="sex",
             data=train_cifar10[~train_cifar10['activation_function'].isin(['f3'])],ci=None,style="activation_function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,5))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="epochs", y="train_loss",
             hue="activation_function",#, style="sex",
             data=train_cifar100[~train_cifar100['activation_function'].isin(['f20'])],ci=None,style="activation_function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,5))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="epochs", y="train_accuracy",
             hue="activation_function",#, style="sex",
             data=train_cifar100,ci=None,style="activation_function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,5))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="epochs", y="val_accuracy",
             hue="activation_function",#, style="sex",
             data=train_cifar100,ci=None,style="activation_function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,5))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="epochs", y="val_loss",
             hue="activation_function",#, style="sex",
             data=train_cifar100,ci=None,style="activation_function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,5))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="epochs", y="test_gradient",
             hue="activation_function",#, style="sex",
             data=train_cifar100,ci=None,style="activation_function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,5))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="epochs", y="time_taken_on_epoch",
             hue="activation_function",#, style="sex",
             data=train_cifar100[~train_cifar100['activation_function'].isin(['f3'])],ci=None,style="activation_function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,5))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="epochs", y="train_loss",
             hue="activation_function",#, style="sex",
             data=train_vgg[~train_vgg['activation_function'].isin(['f20'])],ci=None,style="activation_function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,5))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="epochs", y="train_accuracy",
             hue="activation_function",#, style="sex",
             data=train_vgg,ci=None,style="activation_function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,5))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="epochs", y="val_accuracy",
             hue="activation_function",#, style="sex",
             data=train_vgg,ci=None,style="activation_function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,5))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)

# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="epochs", y="val_loss",
             hue="activation_function",#, style="sex",
             data=train_vgg,ci=None,style="activation_function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,5))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)


# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="epochs", y="time_taken_on_epoch",
             hue="activation_function",#, style="sex",
             data=train_vgg[~train_vgg['activation_function'].isin(['f3'])],ci=None,style="activation_function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,26,5))
plt.legend(bbox_to_anchor=(1.02, 0.55), fontsize='small', title_fontsize='60',loc='center left', borderaxespad=0)
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)



# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir /content/drive/My\ Drive/Colab\ Notebooks/SurveyPaper/logs/

from tensorflow.keras.layers import Activation
Activation('mish')
!pip install tensorflow-addons
import tensorflow_addons as tfa
#act_func_str = tfa.activations.mish

from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
data = pd.read_csv('/content/drive/My Drive/Colab Notebooks/SurveyPaper/graph_table.csv')
data2 = pd.read_csv('/content/drive/My Drive/Colab Notebooks/SurveyPaper/graph_table_2.csv')
data

data[data['Accuracy'] >= 0.65]['Activation Function'].value_counts()

data[(data['Convolution Layers']<4)&(data['Accuracy'] > 0.68)]

data[(data['Accuracy'] > 0.69)&(data['Epochs'] == 25)]#&(data.index == 53),'Epochs'] = 20



data[(data['Accuracy'] > 0.69)&(data['Epochs'] == 20)]

data[(data['Accuracy'] > 0.68)&(data['Epochs'] == 20)]

data['Accuracy'].quantile(0.8)

data2

data['Activation Function'].unique()

import matplotlib.pyplot as plt
# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="Convolution Layers", y="Accuracy",
             hue="Activation Function",#, style="sex",
             data=data[data['Activation Function'].isin(['Shifted Sinc','Absolute','gelu','selu',
                                                         'elu','tanh','Swish','Mish','PReLU',
                                                         'Growing Cosine Unit','Non Monotonic Cubic',
                                                         'Decaying Sine Unit','Quadratic',
                                                         'Monotonic Cubic'])],ci=None,style="Activation Function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,5))
plt.legend(fontsize='small', title_fontsize='60')
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)

import matplotlib.pyplot as plt
# draw lineplot
# hue by sex
# style to hue
sns.set_style("white")
g = sns.lineplot(x="Convolution Layers", y="Loss",
             hue="Activation Function",#, style="sex",
             data=data[data['Activation Function'].isin(['Shifted Sinc','Absolute','gelu','selu',
                                                         'elu','tanh','Swish','Mish','PReLU',
                                                         'Growing Cosine Unit','Non Monotonic Cubic',
                                                         'Decaying Sine Unit','Quadratic',
                                                         'Monotonic Cubic'])],ci=None,style="Activation Function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#, markevery=mark)#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,5))
plt.legend(fontsize='small', title_fontsize='60')
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.gcf().set_dpi(300)
plt.show(g)

import matplotlib.pyplot as plt
# draw lineplot
# hue by sex
# style to hue
g = sns.lineplot(x="Convolution Layers", y="Delta Accuracy",
             hue="Activation Function",#, style="sex",
             data=data2[(data2['Activation Function'].isin(['Quadratic','Shifted Sinc',
                                                            'Decaying Sine Unit',
                                                            'Growing Cosine Unit','Non Monotonic Cubic']))],
                 ci=None,
                 style="Activation Function",
                 markers=True,
                 linewidth = 3,#)#,
                 #markersize=3)#,
                 #markeredgewidth=4,
                 markeredgecolor='black')#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(1,5))
plt.legend(fontsize='x-small', title_fontsize='60')
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.show(g)

import matplotlib.pyplot as plt
# draw lineplot
# hue by sex
# style to hue
g = sns.lineplot(x="Convolution Layers", y="Delta Accuracy",
             hue="Activation Function",#, style="sex",
             data=data2[(data2['Convolution Layers']>=2)&(data2['Activation Function'].isin(['Shifted Sinc','Absolute','gelu','selu',
                                                                                             'elu','tanh','Swish','Mish','PReLU',
                                                                                             'Growing Cosine Unit','Non Monotonic Cubic',
                                                                                             'Decaying Sine Unit','Quadratic']))],
                                                                                             ci=None,
                                                                                             style="Activation Function",
                                                                                             markers=True,
                                                                                             linewidth = 3,#)#,
                                                                                             markeredgecolor='black')#['o','x','<','>'])
#g = g.set(xlim=(0,4))
g.set_xticks(range(2,5))
plt.legend(fontsize='x-small', title_fontsize='60')
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.show(g)



r = sns.barplot(x="Epochs",
            y="Accuracy",
            hue="Activation Function",
            data= data[data['Activation Function'].isin(['Shifted Sinc','Absolute','gelu',
                                                             'selu','elu','tanh','Swish','Mish',
                                                             'PReLU','Growing Cosine Unit','Non Monotonic Cubic',
                                                             'Decaying Sine Unit','Quadratic','Monotonic Cubic'])],
            ci=None)
r.set_yticks([0.5,1])
plt.show(r)

import matplotlib.pyplot as plt
# draw lineplot
# hue by sex
# style to hue
g = sns.lineplot(x="Epochs", y="Accuracy",
             hue="Activation Function",#, style="sex",
             data=data[data['Activation Function'].isin(['Shifted Sinc','Absolute','gelu','selu','elu','tanh','Swish','Mish','PReLU','Growing Cosine Unit','Non Monotonic Cubic','Decaying Sine Unit','Quadratic','Monotonic Cubic'])],ci=None)
#g = g.set(xlim=(0,4))
#g.set_xticks(range(1,5))
plt.legend(fontsize='x-small', title_fontsize='60')
sns.set(rc={'figure.figsize':(10.7,10.27)})
plt.show(g)

import matplotlib.pyplot as plt
# draw lineplot
# hue by sex
# style to hue
g = sns.lineplot(x="Convolution Layers", y="Accuracy",
             hue="Activation Function",#, style="sex",
             data=data[data['Activation Function'].isin(['ReLU','LeakyReLU','Swish','Mish'])])
#g = g.set(xlim=(0,4))
g.set_xticks(range(0,5))
plt.show(g)

import matplotlib.pyplot as plt
# draw lineplot
# hue by sex
# style to hue
g = sns.lineplot(x="Convolution Layers", y="Accuracy",
             hue="Activation Function",#, style="sex",
             data=data[data['Activation Function'].isin(['PReLU','Absolute','Identity','Bipolar'])])
#g = g.set(xlim=(0,4))
g.set_xticks(range(0,5))
plt.show(g)

import matplotlib.pyplot as plt
# draw lineplot
# hue by sex
# style to hue
g = sns.lineplot(x="Convolution Layers", y="Accuracy",
             hue="Activation Function",#, style="sex",
             data=data[data['Activation Function'].isin(['PReLU','Absolute','Identity','Bipolar'])])
#g = g.set(xlim=(0,4))
g.set_xticks(range(0,5))
plt.show(g)

